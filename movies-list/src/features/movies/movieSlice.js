import { createSlice } from "@reduxjs/toolkit"; // state slice
import { createAsyncThunk } from "@reduxjs/toolkit";  // async action creator with middleware thunk

// API call setting here
import movieApi from '../../common/apis/movieApi';     // axios + baseURL API
import {apiKey} from '../../common/apis/MovieApiKey'; // API key (env variables)

const initialState = {
    movies:{},
    shows: {},
    movieOrShowDetail: {},
};

// API call with createAsync creator for movies
// => 2 arguments: string identifier ('actionName/functionName') + payload creator callback function
export const fetchAsyncMovies = createAsyncThunk(
    
    'movies/fetchAsyncMovies',
    async (searched) => {
        
        // Test film recherché sur API
        // const movieSearched = 'Batman';
        
        // axios async request to API
        const response = await movieApi
        .get(`?apiKey=${apiKey}&s=${searched}&type=movie`)
        
        return (response.data);
    }
);


export const fetchAsyncShows= createAsyncThunk(
    
    'movies/fetchAsyncShows',
    async (searched) => {
        
        // Test series recherché sur API
        // const seriesSearched = 'Dragon Ball Z';
        
        // axios async request to API
        const response = await movieApi
        .get(`?apiKey=${apiKey}&s=${searched}&type=series`)
        
        return (response.data);
    }
);


export const fetchAsyncMovieOrShowDetail = createAsyncThunk(
    
    'movies/fetchAsyncMovieDetail',
    async (id) => {
        
        // axios async request to API => cf API doc for endpoint
        const response = await movieApi
        .get(`?apiKey=${apiKey}&i=${id}&Plot=full`)
        
        return (response.data);
    }
);


/* a reducer is a pure function that takes an action and the previous state of the application and returns the new state. 
The action describes what happened and it is the reducer's job to return the new state based on that action. */
const movieSlice = createSlice({
    name:'movies',
    initialState,
    reducers:{
        removePreviousDetail: (state) => {
            // réinitialisation objet à 0
            state.movieOrShowDetail = {}
        }
    },
    extraReducers: {
        //lifecycles
        
        [fetchAsyncMovies.pending]: () => {
            console.log('PENDING...')
        },
        
        [fetchAsyncMovies.fulfilled]: (state, {payload}) => {
            console.log('FETCHED SUCCESSFULLY !!!');
            return {...state, movies: payload}; // return the previous state and take the payload for new state
        },
        
        [fetchAsyncMovies.rejected]: () => {
            console.log('REJECTED !!!');
        },
        
        [fetchAsyncShows.fulfilled]: (state, {payload}) => {
            console.log('FETCHED SUCCESSFULLY !!!');
            return {...state, shows: payload}; // return the previous state and take the payload for new state
        },
        
        [fetchAsyncMovieOrShowDetail.fulfilled]: (state, {payload}) => {
            console.log('FETCHED SUCCESSFULLY !!!');
            return {...state, movieOrShowDetail: payload}; // return the previous state and take the payload for new state
        },
    }
});

// Reducer export action creator generated by removing a movie
export const { removePreviousDetail} = movieSlice.actions;
// export reducer
export default movieSlice.reducer; 

// ACTIONS
// fetch value from the store for movies
export const getAllMovies = (state) => state.movies.movies
// fetch value from the store for shows
export const getAllShows= (state) => state.movies.shows
// fetch value from the store for movie detail
export const getMovieOrShowDetail = (state) => state.movies.movieOrShowDetail
